name: Test Rust project

on:
  workflow_call:
    inputs:
      apt_packages:
        required: false
        type: string
      msrv:
        required: false
        type: string
        default: "1.57.0"
    secrets:
      github-token:
        required: false

env:
  RUSTFLAGS: '-Dwarnings'
  # disable incremental compilation.
  #
  # incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. however,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # see https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). this should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  index:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3
      - name: Generate LSIF data
        uses: sourcegraph/lsif-rust-action@main
      - name: Upload LSIF data
        uses: sourcegraph/lsif-upload-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  check-msrv:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - macos-11
          - ubuntu-20.04
          - windows-2022
    steps:
    - name: Checkout repository
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

    - name: Install Rust toolchain (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run:
        curl https://sh.rustup.rs -sSf | sh -s -- --profile default --default-toolchain ${{ inputs.msrv }} -y

    - name: Install rust toolchain (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        curl https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -o rustup-init.exe
        ./rustup-init --profile default --default-toolchain ${{ inputs.msrv }} -y

    - uses: Swatinem/rust-cache@v1
      with:
        key: cargo-cache-${{ hashFiles('Cargo.lock', 'Cargo.toml') }}-${{ matrix.os }}

    - name: Test compilation
      uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72
      with:
        command: check

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - ubuntu-20.04
          - windows-2022
        rust:
          - beta
          - nightly
          - stable

    steps:
    - name: Checkout repository
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

    - uses: rui314/setup-mold@501fb85cee90dc5aea1f4691c0c7334ec4a4910c # tag=v1
      if: runner.os == 'Linux'
      with:
        make-default: true

    - name: Install Rust toolchain (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run:
        curl https://sh.rustup.rs -sSf | sh -s -- --profile default --default-toolchain ${{ matrix.rust }} -y

    - name: Install rust toolchain (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        curl https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -o rustup-init.exe
        ./rustup-init --profile default --default-toolchain ${{ matrix.rust }} -y

    - uses: Swatinem/rust-cache@v1
      with:
        key: cargo-cache-${{ hashFiles('Cargo.lock', 'Cargo.toml') }}-${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72
      with:
        command: fmt
        args: -- --check

    - name: Install required packages (Linux)
      if: ${{ inputs.apt_packages != '' && runner.os == 'Linux' }}
      shell: bash
      env:
        PACKAGES: ${{ inputs.apt_packages }}
      run: |
        sudo apt-get update
        sudo apt-get install -y ${PACKAGES}

    - name: Install cargo-nextest
      uses: baptiste0928/cargo-install@bf6758885262d0e6f61089a9d8c8790d3ac3368f # tag=v1
      with:
        crate: cargo-nextest
        version: "0.9.14"

    - name: Install cargo-deny
      uses: baptiste0928/cargo-install@bf6758885262d0e6f61089a9d8c8790d3ac3368f # tag=v1
      with:
        crate: cargo-deny
        version: "0.11.4"

    - name: cargo-deny
      shell: bash
      run: |
        if [ -f deny.toml ]; then
          cargo deny check
        fi

    - name: Clippy
      uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72
      with:
        command: clippy
        args: -- -Wclippy::pedantic

    - name: Run tests
      uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72
      with:
        command: nextest
        args: run --all-features
