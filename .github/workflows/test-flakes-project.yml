name: Test Nix Flakes project

on:
  workflow_call:
    inputs:
      extra-targets:
        type: string
        required: false
        default: ""
      extra-nix-flags:
        type: string
        required: false
        default: ""
    secrets:
      cachix-token:
        required: true
      github-token:
        required: true

jobs:
  check:
    name: Build and check
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        submodules: 'recursive'
        persist-credentials: false

    - name: Install Nix
      uses: nixbuild/nix-quick-install-action@25aff27c252e0c8cdda3264805f7b6bcd92c8718 # v29
      with:
        nix_conf: |
          experimental-features = pipe-operators
          access-tokens = github.com=${{ secrets.github-token }}

    - name: Restore and cache Nix store
      uses: nix-community/cache-nix-action@8351fb9f51c580c96c509987ebb99e38aed956ce # v5.2.1
      with:
        primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-prefixes-first-match: nix-${{ runner.os }}-
        gc-max-store-size-linux: 7500000000
        purge: true
        purge-prefixes: nix-${{ runner.os }}-
        purge-created: 0
        purge-primary-key: never

    - name: Remove old cache profiles
      run: rm -rf /nix/var/nix/profiles/cache

    - name: Run default check
      shell: bash
      env:
        NIX_FLAGS: ${{ inputs.extra-nix-flags }}
      run: |
        read -ra FLAGS <<<"$NIX_FLAGS"
        nix flake check '.?submodules=1#' --print-build-logs "${FLAGS[@]}"

    - name: Run additional checks
      shell: bash
      if: ${{ inputs.extra-targets != '' }}
      env:
        TARGET_STRING: ${{ inputs.extra-targets }}
        NIX_FLAGS: ${{ inputs.extra-nix-flags }}
      run: |
        read -ra TARGETS <<<"$TARGET_STRING"
        read -ra FLAGS <<<"$NIX_FLAGS"
        for TARGET in "${TARGETS[@]}"; do
          nix build --print-build-logs "${FLAGS[@]}" "${TARGET}"
        done
