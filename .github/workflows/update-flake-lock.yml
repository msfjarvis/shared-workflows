name: Update flake.lock

on:
  workflow_call:
    inputs:
      inputs:
        description: Space separated list of flake inputs to be updated (defaults to all)
        type: string
        default: ""
        required: false
    secrets:
      github-token:
        required: true

jobs:
  update-flake-lock:
    name: Update flake.lock
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ secrets.github-token }}
          persist-credentials: true

      - uses: cachix/install-nix-action@c134e4c9e34bac6cab09cf239815f9339aaaf84e # v31
        with:
          github_access_token: ${{ secrets.github-token }}

      - name: Create scripts
        shell: bash
        run: |
          # Create directory for diff data
          mkdir -p /tmp/flake-diff

          # Create Nix script to extract versions
          cat > /tmp/flake-diff/list-versions.nix << 'EOF'
          let
            pkgs = import (builtins.fetchTarball "URL_PLACEHOLDER") {};
            lib = pkgs.lib;

            # Function to safely get version or mark as N/A
            getVersionSafe = name: pkg:
              if pkg ? version && builtins.isString pkg.version
              then pkg.version
              else "N/A";

            # Get attribute names from the top level packages
            allAttrNames = builtins.attrNames pkgs;

            # Filter invalid attribute names that may cause evaluation errors
            validAttrNames = builtins.filter (
              name: lib.strings.substring 0 1 name != "_" && builtins.match "[a-zA-Z0-9].*" name != null
            ) allAttrNames;

            # Filter to only include packages with versions where possible
            packageAttrs = builtins.filter (
              name:
              let
                safe = builtins.tryEval (builtins.getAttr name pkgs);
              in
              safe.success && ((lib.isDerivation safe.value) || (safe.value ? version))
            ) validAttrNames;

            # Create list of packages with their versions
            # Create package versions as attribute set
            packageVersions = builtins.listToAttrs (
              builtins.map (
                name:
                let
                  pkg = builtins.getAttr name pkgs;
                  safe = builtins.tryEval (if pkg ? version then pkg.version else null);
                  version = if safe.success && safe.value != null then safe.value else "N/A";
                in
                {
                  inherit name;
                  value = version;
                }
              ) packageAttrs
            );
          in
          builtins.toJSON packageVersions
          EOF

          # Create Python script for analyzing versions
          cat > /tmp/flake-diff/process-diff.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import sys

          # Paths to version files
          pre_versions_path = '/tmp/flake-diff/pre-versions.json'
          post_versions_path = '/tmp/flake-diff/post-versions.json'

          # Load pre and post version data
          try:
              with open(pre_versions_path, 'r') as f:
                  pre_string = f.read().strip()
                  # Handle case where the JSON is a quoted string
                  if pre_string.startswith('"') and pre_string.endswith('"'):
                      # Unescape JSON string
                      pre_string = json.loads(pre_string)
                  pre_data = json.loads(pre_string)

              with open(post_versions_path, 'r') as f:
                  post_string = f.read().strip()
                  # Handle case where the JSON is a quoted string
                  if post_string.startswith('"') and post_string.endswith('"'):
                      # Unescape JSON string
                      post_string = json.loads(post_string)
                  post_data = json.loads(post_string)
          except Exception as e:
              print(f"Error loading version data: {e}", file=sys.stderr)
              print(f"Pre content: {open(pre_versions_path, 'r').read()[:100]}...")
              print(f"Post content: {open(post_versions_path, 'r').read()[:100]}...")
              sys.exit(1)

          # Convert to dictionaries for easy lookup (handle different formats)
          pre_versions = {}
          post_versions = {}

          # Handle both list of objects and dictionary format
          if isinstance(pre_data, list):
              for item in pre_data:
                  if isinstance(item, dict) and 'name' in item and 'version' in item:
                      pre_versions[item['name']] = item['version']
          elif isinstance(pre_data, dict):
              pre_versions = pre_data

          if isinstance(post_data, list):
              for item in post_data:
                  if isinstance(item, dict) and 'name' in item and 'version' in item:
                      post_versions[item['name']] = item['version']
          elif isinstance(post_data, dict):
              post_versions = post_data

          # Find all unique packages
          all_packages = sorted(set(list(pre_versions.keys()) + list(post_versions.keys())))

          # Find changed packages
          changed_packages = []
          for pkg in all_packages:
              pre_ver = pre_versions.get(pkg, 'N/A')
              post_ver = post_versions.get(pkg, 'N/A')
              if pre_ver != post_ver:
                  changed_packages.append((pkg, pre_ver, post_ver))

          # Print summary to stderr
          print(f"Total packages: {len(all_packages)}", file=sys.stderr)
          print(f"Changed packages: {len(changed_packages)}", file=sys.stderr)

          # Output change table to stdout
          print("| Package | Previous Version | New Version | Changed |")
          print("| ------- | ---------------- | ----------- | ------- |")

          # Output changed packages first
          for pkg, pre_ver, post_ver in changed_packages:
              print(f"| {pkg} | {pre_ver} | {post_ver} | **Yes** |")

          # Output information about total packages
          print(f"\n> **Note:** {len(changed_packages)} packages changed out of {len(all_packages)} total packages in nixpkgs.")
          EOF

          chmod +x /tmp/flake-diff/process-diff.py

      - name: Capture pre-update package versions
        shell: bash
        run: |
          echo "## Capturing pre-update package versions from nixpkgs input" >> $GITHUB_STEP_SUMMARY
          if [ -f flake.lock ]; then
            echo "### Pre-update nixpkgs revision" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            # Extract the nixpkgs URL and revision from flake.lock
            NIXPKGS_URL=$(jq -r '.nodes.nixpkgs.locked.url // "https://github.com/" + .nodes.nixpkgs.locked.owner + "/" + .nodes.nixpkgs.locked.repo' flake.lock)
            NIXPKGS_REV=$(jq -r '.nodes.nixpkgs.locked.rev' flake.lock)
            NIXPKGS_TARBALL="https://github.com/$(echo $NIXPKGS_URL | sed -E 's|.*github.com/||' | sed -E 's|.*://||')/archive/$NIXPKGS_REV.tar.gz"
            echo "Nixpkgs: $NIXPKGS_URL@$NIXPKGS_REV" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            # Save the pre-update revision
            echo "$NIXPKGS_REV" > /tmp/flake-diff/pre-rev.txt

            # Replace placeholder with actual URL
            sed -i.bak "s|URL_PLACEHOLDER|$NIXPKGS_TARBALL|g" /tmp/flake-diff/list-versions.nix && rm -f /tmp/flake-diff/list-versions.nix.bak

            echo "Capturing versions for nixpkgs at $NIXPKGS_TARBALL"

            # Run the expression to get all package versions
            echo "Evaluating nixpkgs to extract package versions..."
            TMPFILE=$(mktemp)
            if nix-instantiate --eval --strict --json /tmp/flake-diff/list-versions.nix > "$TMPFILE"; then
              if jq -e . "$TMPFILE" > /tmp/flake-diff/pre-versions.json; then
                echo "Successfully extracted package versions from pre-update nixpkgs"
              else
                echo "Warning: Invalid JSON output. Creating empty JSON file."
                echo "{}" > /tmp/flake-diff/pre-versions.json
              fi
            else
              echo "Warning: Error during nix evaluation. This might be due to nixpkgs issues."
              echo "{}" > /tmp/flake-diff/pre-versions.json
            fi
            rm -f "$TMPFILE"
          else
            echo "No flake.lock found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update flake.lock
        shell: bash
        env:
          INPUTS: ${{ inputs.inputs }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"
          nix flake update ${INPUTS} --commit-lock-file

      - name: Capture post-update package versions and generate diff
        shell: bash
        run: |
          echo "### Post-update nixpkgs revision" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # Extract the nixpkgs URL and revision from flake.lock
          NIXPKGS_URL=$(jq -r '.nodes.nixpkgs.locked.url // "https://github.com/" + .nodes.nixpkgs.locked.owner + "/" + .nodes.nixpkgs.locked.repo' flake.lock)
          NIXPKGS_REV=$(jq -r '.nodes.nixpkgs.locked.rev' flake.lock)
          NIXPKGS_TARBALL="https://github.com/$(echo $NIXPKGS_URL | sed -E 's|.*github.com/||' | sed -E 's|.*://||')/archive/$NIXPKGS_REV.tar.gz"
          echo "Nixpkgs: $NIXPKGS_URL@$NIXPKGS_REV" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Save the post-update revision
          echo "$NIXPKGS_REV" > /tmp/flake-diff/post-rev.txt

          # Replace placeholder with actual URL
          sed -i.bak "s|URL_PLACEHOLDER|$NIXPKGS_TARBALL|g" /tmp/flake-diff/list-versions.nix && rm -f /tmp/flake-diff/list-versions.nix.bak

          echo "Capturing versions for nixpkgs at $NIXPKGS_TARBALL"

          # Run the expression to get all package versions
          echo "Evaluating nixpkgs to extract package versions..."
          TMPFILE=$(mktemp)
          if nix-instantiate --eval --strict --json /tmp/flake-diff/list-versions.nix > "$TMPFILE"; then
            if jq -e . "$TMPFILE" > /tmp/flake-diff/post-versions.json; then
              echo "Successfully extracted package versions from post-update nixpkgs"
            else
              echo "Warning: Invalid JSON output. Creating empty JSON file."
              echo "{}" > /tmp/flake-diff/post-versions.json
            fi
          else
            echo "Warning: Error during nix evaluation. This might be due to nixpkgs issues."
            echo "{}" > /tmp/flake-diff/post-versions.json
          fi
          rm -f "$TMPFILE"

          # Generate a combined version table with differences
          echo "### Nixpkgs Package Version Changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          PRE_REV=$(cat /tmp/flake-diff/pre-rev.txt)
          POST_REV=$(cat /tmp/flake-diff/post-rev.txt)

          # Run the processor script
          echo "Processing version differences..."
          python3 /tmp/flake-diff/process-diff.py >> $GITHUB_STEP_SUMMARY

          # Add a link to compare the revisions on GitHub if possible
          if [[ "$NIXPKGS_URL" == *"github"* ]]; then
            # Extract owner/repo from URL
            if [[ "$NIXPKGS_URL" == *"github.com"* ]]; then
              REPO_PATH=$(echo "$NIXPKGS_URL" | sed -E 's|.*github.com/([^/]+/[^/]+).*|\1|')
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Compare Changes" >> $GITHUB_STEP_SUMMARY
            echo "[View all changes between revisions](https://github.com/$REPO_PATH/compare/$PRE_REV...$POST_REV)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Push changes
        shell: bash
        run: |
          # Create a more descriptive commit message
          PRE_REV=$(cat /tmp/flake-diff/pre-rev.txt | cut -c1-7)
          POST_REV=$(cat /tmp/flake-diff/post-rev.txt | cut -c1-7)

          # Amend the commit with a better message if we updated nixpkgs
          if [ "$PRE_REV" != "$POST_REV" ]; then
            git commit --amend -m "Update flake.lock (nixpkgs: $PRE_REV → $POST_REV)" || true
          fi

          git push
